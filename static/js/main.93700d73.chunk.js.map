{"version":3,"sources":["logo.svg","components/Navbar/index.js","components/CharacterCard/index.js","components/Wrapper/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Navbar","props","react_default","a","createElement","className","yourGuessText","yourScore","yourHighScore","CharacterCard","onClick","handleClick","id","alt","name","src","image","Wrapper","children","App","state","yourGuesses","characters","newGuess","_this","correct","i","length","console","log","setState","newScore","highScore","push","_this2","this","Fragment","components_Wrapper","components_Navbar","map","character","components_CharacterCard","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"00DAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,+OCwBzBC,MArBf,SAAgBC,GACd,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kDACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,yBAAb,eAGAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aACVJ,EAAMK,eAETJ,EAAAC,EAAAC,cAAA,KAAGC,UAAU,oBAAb,UACUJ,EAAMM,WAEhBL,EAAAC,EAAAC,cAAA,KAAGC,UAAU,iBAAb,gBACgBJ,EAAMO,wBCJfC,MAVf,SAAuBR,GACrB,OACEC,EAAAC,EAAAC,cAAA,OAAKM,QAAS,kBAAMT,EAAMU,YAAYV,EAAMW,KAAKP,UAAU,QACzDH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKS,IAAKZ,EAAMa,KAAMC,IAAKd,EAAMe,wBCA1BC,MAJf,SAAiBhB,GACf,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMiB,WCsH1BC,6MA/GbC,MAAQ,CACNd,cAAe,GACfC,UAAW,EACXC,cAAe,EACfa,YAAa,GACbC,gBAGFX,YAAc,SAAAC,GAOZ,IALA,IAAIW,EAAWC,EAAKJ,MAAMC,YAGtBI,GAAU,EAELC,EAAI,EAAGA,EAAKF,EAAKJ,MAAMC,YAAYM,OAAS,EAAID,IAAK,CAC5D,GAAId,IAAOY,EAAKJ,MAAMC,YAAYK,GAAI,CACpCE,QAAQC,IAAI,gBACZL,EAAKM,SAAS,CAAExB,cANL,+BAOXyB,EAAW,EACXP,EAAKM,SAAS,CAAEvB,UAAWwB,IAC3BR,EAAW,GACXE,GAAU,EACV,MAGAD,EAAKM,SAAS,CAAExB,cAfN,2BAgBV,IAAIyB,EAAWP,EAAKJ,MAAMb,UAC1BwB,IACAP,EAAKM,SAAS,CAAEvB,UAAWwB,IAC3B,IAAIC,EAAYR,EAAKJ,MAAMZ,cACvBuB,EAAWC,IACbA,EAAYD,EACZP,EAAKM,SAAS,CAAEtB,cAAewB,KAIjCP,GACFF,EAASU,KAAKrB,GAEhBgB,QAAQC,IAAI,SAAWE,GACvBP,EAAKM,SAAS,CAAET,YAAaE,6EA6CtB,IAAAW,EAAAC,KACP,OACEjC,EAAAC,EAAAC,cAACF,EAAAC,EAAMiC,SAAP,KACElC,EAAAC,EAAAC,cAACiC,EAAD,KACEnC,EAAAC,EAAAC,cAACkC,EAAD,CACEhC,cAAe6B,KAAKf,MAAMd,cAC1BC,UAAW4B,KAAKf,MAAMb,UACtBC,cAAe2B,KAAKf,MAAMZ,gBAE3B2B,KAAKf,MAAME,WAAWiB,IAAI,SAAAC,GAAS,OAClCtC,EAAAC,EAAAC,cAACqC,EAAD,CACE9B,YAAauB,EAAKvB,YAClBC,GAAI4B,EAAU5B,GACd8B,IAAKF,EAAU5B,GACfE,KAAM0B,EAAU1B,KAChBE,MAAOwB,EAAUxB,mBAvGb2B,IAAMC,WCGJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjD,EAAAC,EAAAC,cAACgD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.93700d73.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport \"./style.css\";\n\nfunction Navbar(props) {\n  return (\n    <nav className=\"navbar navbar-expand-lg navbar-dark bg-primary\">\n      <div className=\"row\">\n        <p className=\"navbar-brand gameName\">\n          Clicky-Game\n      </p>\n        <p className=\"guessText\">\n          {props.yourGuessText}\n        </p>\n        <p className=\"currentScoreText\">\n          Score: {props.yourScore}\n        </p>\n        <p className=\"highScoreText\">\n          | Top Score: {props.yourHighScore}\n        </p>\n      </div>\n    </nav>\n  );\n}\n\nexport default Navbar;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction CharacterCard(props) {\n  return (\n    <div onClick={() => props.handleClick(props.id)} className=\"card\">\n      <div className=\"img-container\">\n        <img alt={props.name} src={props.image} />\n      </div>\n    </div>\n  );\n}\n\nexport default CharacterCard;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Navbar from './components/Navbar'\nimport Character from './components/CharacterCard'\nimport characters from './Characters.json'\nimport Wrapper from './components/Wrapper'\n\n\nclass App extends React.Component {\n\n  state = {\n    yourGuessText: \"\",\n    yourScore: 0,\n    yourHighScore: 0,\n    yourGuesses: [],\n    characters\n  }\n\n  handleClick = id => {\n\n    var newGuess = this.state.yourGuesses;\n    var winText = \"You guessed correctly!\";\n    var loseText = \"You guessed incorrectly :(\";\n    var correct = true;\n\n    for (let i = 0; i < (this.state.yourGuesses.length + 1); i++) {\n      if (id === this.state.yourGuesses[i]) {\n        console.log(\"Matching IDs\");\n        this.setState({ yourGuessText: loseText })\n        newScore = 0;\n        this.setState({ yourScore: newScore });\n        newGuess = [];\n        correct = false;\n        break;\n      }\n      else {\n        this.setState({ yourGuessText: winText })\n        var newScore = this.state.yourScore;\n        newScore++;\n        this.setState({ yourScore: newScore })\n        var highScore = this.state.yourHighScore;\n        if (newScore > highScore) {\n          highScore = newScore;\n          this.setState({ yourHighScore: highScore })\n        }\n      }\n    }\n    if (correct) {\n      newGuess.push(id);\n    }\n    console.log(\"Score:\" + newScore);\n    this.setState({ yourGuesses: newGuess })\n\n\n\n    // var ids = [0,1,2,3,4,5,6,7,8,9,10,11];\n    // this.shuffle(ids);\n    // // console.log(ids);\n    // var temp = this.state.characters\n    // // console.log(\"temp[0]\")\n    // // console.log(temp[0])\n    // // console.log(temp)\n\n    // for (let i = 0; i < this.state.characters.length; i++) {\n    //   // temp[i] = ids[i]\n    //   console.log(ids[i])\n    //   ids[i] = temp[i]\n    // }\n    // // console.log(temp)\n    // // console.log(\"ids[0]\")\n    // console.log(ids[0])\n    // // console.log(ids)\n    // // this.setState({ characters: temp })\n\n  }\n\n  // shuffle(array) {\n  //   var tmp, current, top = array.length;\n  //   if (top) while (--top) {\n  //     current = Math.floor(Math.random() * (top + 1));\n  //     tmp = array[current];\n  //     array[current] = array[top];\n  //     array[top] = tmp;\n  //   }\n  //   return array;\n  // }\n\n\n\n\n  // shuffle(set) {\n  //   let items = Array.from(set);\n  //   return items[Math.floor(Math.random() * items.length)];\n  // }\n\n\n  render() {\n    return (\n      <React.Fragment>\n        <Wrapper>\n          <Navbar\n            yourGuessText={this.state.yourGuessText}\n            yourScore={this.state.yourScore}\n            yourHighScore={this.state.yourHighScore}\n          />\n          {this.state.characters.map(character => (\n            <Character\n              handleClick={this.handleClick}\n              id={character.id}\n              key={character.id}\n              name={character.name}\n              image={character.image}\n            />\n          ))}\n\n        </Wrapper>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}